generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @unique @default(uuid())
  email        String    @unique
  firstName    String
  lastName     String
  profileImage String?
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model BusCompany {
  id           String     @id @unique @default(uuid())
  name         String
  email        String     @unique
  password     String
  logoUrl      String?
  branches     Branch[]
  buses        Bus[]      // Add this field
  drivers      Driver[]   // Add this field
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Branch {
  id           String     @id @unique @default(uuid())
  name         String
  address      String
  location     String
  company      BusCompany @relation(fields: [companyId], references: [id])
  companyId    String
  admins       Admin[]    
  routes       Route[]    
  trips        Trip[]     // Add this line to make the relationship bi-directional
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}


model Permission {
  id           String  @id @unique @default(uuid())
  entity       String  // e.g., 'admin', 'companies', 'branches', etc.
  canCreate    Int     @default(0) // 0 for false, 1 for true
  canRead      Int     @default(0) // 0 for false, 1 for true
  canUpdate    Int     @default(0) // 0 for false, 1 for true
  canDelete    Int     @default(0) // 0 for false, 1 for true
  admin        Admin   @relation(fields: [adminId], references: [id])
  adminId      String
  createdAt    DateTime @default(now())
}

model Blog {
  id           String    @id @unique @default(uuid())
  title        String
  content      String
  imageUrl     String?
  admin        Admin     @relation(fields: [adminId], references: [id]) // Written by Admin
  adminId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Gallery {
  id           String    @id @unique @default(uuid())
  title        String
  imageUrl     String
  description  String?
  admin        Admin     @relation(fields: [adminId], references: [id]) // Managed by Admin
  adminId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Admin {
  id           String     @id @unique @default(uuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  branch       Branch     @relation(fields: [branchId], references: [id])
  branchId     String
  blogs        Blog[]     // Relationship to Blog
  galleries    Gallery[]  // Relationship to Gallery
  permissions  Permission[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}


model Bus {
  id           String     @id @unique @default(uuid())
  plateNumber  String
  capacity     Int
  busType      String
  imageUrl     String?   
  company      BusCompany @relation(fields: [companyId], references: [id]) // Relating to BusCompany
  companyId    String
  trips        Trip[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Driver {
  id           String     @id @unique @default(uuid())
  firstName    String
  lastName     String
  licenseNumber String    @unique
  email        String     @unique
  mobile       String
  company      BusCompany @relation(fields: [companyId], references: [id]) // Relating to BusCompany
  companyId    String
  trips        Trip[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Trip {
  id           String    @id @unique @default(uuid())
  date         DateTime
  price        Float
  departureTime String 
  bus          Bus       @relation(fields: [busId], references: [id])
  busId        String
  route        Route     @relation(fields: [routeId], references: [id])
  routeId      String
  driver       Driver    @relation(fields: [driverId], references: [id])
  driverId     String
  branch       Branch    @relation(fields: [branchId], references: [id])  // Assigning branch per trip
  branchId     String
  bookings     Booking[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Location {
  id           String       @id @unique @default(uuid())
  name         String
  routesFrom   Route[]      @relation("routesFrom")
  routesTo     Route[]      @relation("routesTo")
}

model Route {
  id           String     @id @unique @default(uuid())
  startLocation Location  @relation("routesFrom", fields: [startLocationId], references: [id])
  startLocationId String
  endLocation   Location  @relation("routesTo", fields: [endLocationId], references: [id])
  endLocationId String
  duration      Int      
  distance      Int        
  branch        Branch     @relation(fields: [branchId], references: [id])
  branchId      String
  trips         Trip[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Booking {
  id           String    @id @unique @default(uuid())
  date         DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  trip         Trip      @relation(fields: [tripId], references: [id])
  tripId       String
  seatNumber   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
