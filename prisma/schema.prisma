generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  firstName          String
  lastName           String
  profileImage       String?
  phoneNumber        String?
  bookings           Booking[]
  busCancellations   BusCancellation[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model BusCompany {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  logo         String?
  branches     Branch[]
  buses        Bus[]
  drivers      Driver[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Branch {
  id           String     @id @default(uuid())
  name         String
  address      String
  phoneNumber  String?
  city         String
  company      BusCompany @relation(fields: [companyId], references: [id])
  companyId    String
  admins       Admin[]
  routes       Route[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[]
  admins      Admin[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id         String   @id @default(uuid())
  name       String   @unique
  canCreate  Boolean  @default(false)
  canRead    Boolean  @default(false)
  canUpdate  Boolean  @default(false)
  canDelete  Boolean  @default(false)
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Admin {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  branch       Branch     @relation(fields: [branchId], references: [id])
  branchId     String
  blogs        Blog[]
  galleries    Gallery[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Bus {
  id              String     @id @default(uuid())
  plateNumber     String?
  capacity        Int
  busDescription        String?
  onArrival       Boolean    @default(false)
  status          String     @default("available")
  image           String?
  company         BusCompany @relation(fields: [companyId], references: [id])
  companyId       String
  trips           Trip[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  // Amenities
  airConditioning Boolean    @default(false)
  chargingOutlets Boolean    @default(false)
  wifi            Boolean    @default(false)
  restRoom        Boolean    @default(false)
  seatBelts       Boolean    @default(false)
  onboardFood     Boolean    @default(false)
}

model Driver {
  id            String     @id @default(uuid())
  firstName     String
  lastName      String
  licenseNumber String     @unique
  email         String     @unique
  mobile        String
  status        String     @default("Available")
  company       BusCompany @relation(fields: [companyId], references: [id])
  companyId     String
  trips         Trip[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Trip {
  id               String            @id @default(uuid())
  // Trip scheduling
  date             DateTime?         // For one-time trips
  recurring        Boolean           @default(false)
  daysOfWeek       Int[]             // Days of week the trip occurs (1=Monday, 7=Sunday)
  specificDates    TripDate[]        // For trips that occur on specific dates
  // Trip pricing
  price            Float
  currency         Currency          @default(GHS)
  commission       Float             @default(0.00)
  commissionType   CommissionType    @default(FIXED)
  // Trip details
  departureTime    String
  // Relationships
  bus              Bus?              @relation(fields: [busId], references: [id])
  busId            String?
  route            Route             @relation(fields: [routeId], references: [id])
  routeId          String
  driver           Driver?           @relation(fields: [driverId], references: [id])
  driverId         String?
  bookings         Booking[]
  busCancellations BusCancellation[]
  // Timestamps
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum CommissionType {
  FIXED
  PERCENTAGE
}

enum Currency {
  USD  // US Dollar ($)
  EUR  // Euro (€)
  GBP  // British Pound (£)
  JPY  // Japanese Yen (¥)
  CAD  // Canadian Dollar (C$)
  AUD  // Australian Dollar (A$)
  CNY  // Chinese Yuan (¥)
  INR  // Indian Rupee (₹)

  // African Currencies
  NGN  // Nigerian Naira (₦)
  KES  // Kenyan Shilling (KSh)
  ZAR  // South African Rand (R)
  GHS  // Ghanaian Cedi (₵)
  EGP  // Egyptian Pound (E£)
  MAD  // Moroccan Dirham (د.م.)
  XOF  // West African CFA Franc (CFA)
  XAF  // Central African CFA Franc (FCFA)
  RWF  // Rwandan Franc (FRw)
  UGX  // Ugandan Shilling (USh)
  TZS  // Tanzanian Shilling (TSh)
  MWK  // Malawian Kwacha (MK)
  ZMW  // Zambian Kwacha (ZK)
  BWP  // Botswana Pula (P)
  SCR  // Seychellois Rupee (SR)
  MUR  // Mauritian Rupee (₨)
  DJF  // Djiboutian Franc (Fdj)
  LSL  // Lesotho Loti (M)
  SZL  // Swazi Lilangeni (E)
  SOS  // Somali Shilling (Sh)
  GMD  // Gambian Dalasi (D)
  SLL  // Sierra Leonean Leone (Le)
  MZN  // Mozambican Metical (MT)
  LYD  // Libyan Dinar (LD)
  SDG  // Sudanese Pound (SD)
  ERN  // Eritrean Nakfa (Nfk)
  CDF  // Congolese Franc (FC)
  MGA  // Malagasy Ariary (Ar)
}

model TripDate {
  id        String   @id @default(uuid())
  date      DateTime
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id           String   @id @default(uuid())
  name         String
  imageUrl     String?
  country      String
  currency     Currency @default(USD)
  routesFrom   Route[]  @relation("routesFrom")
  routesTo     Route[]  @relation("routesTo")
}

model Route {
  id           String   @id @default(uuid())
  startCity    City     @relation("routesFrom", fields: [startCityId], references: [id])
  startCityId  String
  endCity      City     @relation("routesTo", fields: [endCityId], references: [id])
  endCityId    String
  duration     Int
  distance     Int
  branch       Branch   @relation(fields: [branchId], references: [id])
  branchId     String
  trips        Trip[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id           String        @id @default(uuid())
  reference    String        @unique 
  date         DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  trip         Trip          @relation(fields: [tripId], references: [id])
  tripId       String
  seatNumber   Int[]
  totalAmount  Float
  currency     Currency
  status       BookingStatus @default(pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  refunded
  retained
}

model BusCancellation {
  id           String   @id @default(uuid())
  bookingDate  DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  trip         Trip     @relation(fields: [tripId], references: [id])
  tripId       String
  seatNumber   Int
  refundAmount Float?
  currency     Currency
  status       String   @default("cancelled")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Blog {
  id           String   @id @default(uuid())
  title        String
  content      String
  image        String?
  admin        Admin    @relation(fields: [adminId], references: [id])
  adminId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Gallery {
  id           String   @id @default(uuid())
  title        String
  image        String
  description  String?
  admin        Admin    @relation(fields: [adminId], references: [id])
  adminId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
