generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  firstName          String
  lastName           String
  profileImage       String?
  phoneNumber        String?
  bookings           Booking[]
  busCancellations   BusCancellation[] // Opposite relation field for BusCancellation
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model BusCompany {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  logo      String?
  branches     Branch[]
  buses        Bus[]
  drivers      Driver[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Branch {
  id           String     @id @default(uuid())
  name         String
  address      String
  phoneNumber  String?
  city         String
  company      BusCompany @relation(fields: [companyId], references: [id])
  companyId    String
  admins       Admin[]
  routes       Route[]
  trips        Trip[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[] // One-to-many relationship with Permission
  admins      Admin[]      //roles are assigned to admins
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id         String  @id @default(uuid())
  name       String  @unique
  canCreate  Boolean @default(false)
  canRead    Boolean @default(false)
  canUpdate  Boolean @default(false)
  canDelete  Boolean @default(false)
  roleId     String  // Foreign key for Role
  role       Role    @relation(fields: [roleId], references: [id]) // Belongs to one Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Admin {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  firstName    String
  lastName     String
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  branch       Branch     @relation(fields: [branchId], references: [id])
  branchId     String
  blogs        Blog[]
  galleries    Gallery[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Bus {
  id            String     @id @default(uuid())
  plateNumber   String
  capacity      Int
  busModel      String
  status        String     @default("available") // Status field added
  image         String?
  company       BusCompany @relation(fields: [companyId], references: [id])
  companyId     String
  trips         Trip[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  airConditioning Boolean   @default(false)   // Boolean for air conditioning
  chargingOutlets Boolean   @default(false)   // Boolean for charging outlets
  wifi           Boolean   @default(false)   // Boolean for Wi-Fi
  restRoom       Boolean   @default(false)   // Boolean for restroom availability
  seatBelts      Boolean   @default(false)   // Boolean for seat belts availability
  onboardFood    Boolean   @default(false)   // Boolean for onboard food
}


model Driver {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  licenseNumber String    @unique
  email        String     @unique
  mobile       String
  status       String     @default("Available") // Status field added
  company      BusCompany @relation(fields: [companyId], references: [id])
  companyId    String
  trips        Trip[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Trip {
  id           String    @id @default(uuid())
  date         DateTime
  price        Float
  departureTime String
  bus          Bus       @relation(fields: [busId], references: [id])
  busId        String
  route        Route     @relation(fields: [routeId], references: [id])
  routeId      String
  driver       Driver    @relation(fields: [driverId], references: [id])
  driverId     String
  branch       Branch    @relation(fields: [branchId], references: [id])
  branchId     String
  bookings     Booking[]
  busCancellations BusCancellation[] // Opposite relation field for BusCancellation
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model City {
  id           String       @id @default(uuid())
  name         String
  country      String
  routesFrom   Route[]      @relation("routesFrom")
  routesTo     Route[]      @relation("routesTo")
}

model Route {
  id           String     @id @default(uuid())
  startCity    City       @relation("routesFrom", fields: [startCityId], references: [id])
  startCityId  String
  endCity      City       @relation("routesTo", fields: [endCityId], references: [id])
  endCityId    String
  duration     Int
  distance     Int
  branch       Branch     @relation(fields: [branchId], references: [id])
  branchId     String
  trips        Trip[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id           String    @id @default(uuid())
  date         DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  trip         Trip      @relation(fields: [tripId], references: [id])
  tripId       String
  seatNumber   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model BusCancellation {
  id           String    @id @default(uuid())
  bookingDate  DateTime
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  trip         Trip      @relation(fields: [tripId], references: [id])
  tripId       String
  seatNumber   Int
  status       String    @default("pending") // refunded, retained, or pending
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Blog {
  id           String    @id @default(uuid())
  title        String
  content      String
  image     String?
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Gallery {
  id           String    @id @default(uuid())
  title        String
  image     String
  description  String? 
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
